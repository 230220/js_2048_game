{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        // eslint-disable-next-line no-console\n        this.size = 4;\n        this.score = 0;\n        this.state = initialState || Array.from({\n            length: this.size\n        }, ()=>Array(this.size).fill(0));\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        let moved = false;\n        for(let i = 0; i < this.size; i++){\n            const newRow = this.#mergeRow([\n                ...this.state[i]\n            ]);\n            if (JSON.stringify(this.state[i]) !== JSON.stringify(newRow)) moved = true;\n            this.state[i] = newRow;\n        }\n        if (moved) this.#afterMove();\n        return moved;\n    }\n    moveRight() {\n        let moved = false;\n        for(let i = 0; i < this.size; i++){\n            const reversed = [\n                ...this.state[i]\n            ].reverse();\n            const newRow = this.#mergeRow(reversed).reverse();\n            if (JSON.stringify(this.state[i]) !== JSON.stringify(newRow)) moved = true;\n            this.state[i] = newRow;\n        }\n        if (moved) this.#afterMove();\n        return moved;\n    }\n    moveUp() {\n        let moved = false;\n        for(let j = 0; j < this.size; j++){\n            const col = [];\n            for(let i = 0; i < this.size; i++)col.push(this.state[i][j]);\n            const newCol = this.#mergeRow([\n                ...col\n            ]);\n            if (JSON.stringify(col) !== JSON.stringify(newCol)) moved = true;\n            for(let i = 0; i < this.size; i++)this.state[i][j] = newCol[i];\n        }\n        if (moved) this.#afterMove();\n        return moved;\n    }\n    moveDown() {\n        let moved = false;\n        for(let j = 0; j < this.size; j++){\n            const col = [];\n            for(let i = 0; i < this.size; i++)col.push(this.state[i][j]); // эт\n            const newCol = this.#mergeRow(col.reverse()).reverse();\n            if (JSON.stringify(col) !== JSON.stringify(newCol)) moved = true;\n            for(let i = 0; i < this.size; i++)this.state[i][j] = newCol[i];\n        }\n        if (moved) this.#afterMove();\n        return moved;\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.score = 0;\n        // prettier-ignore\n        this.state = Array.from({\n            length: this.size\n        }, ()=>Array(this.size).fill(0));\n        this.#addRandomTile();\n        this.#addRandomTile();\n        this.status = \"playing\";\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.start();\n    }\n    // Add your own methods here\n    #mergeRow(row) {\n        let filtered = row.filter((v)=>v !== 0);\n        for(let i = 0; i < filtered.length - 1; i++)if (filtered[i] === filtered[i + 1]) {\n            filtered[i] *= 2;\n            filtered[i + 1] = 0;\n            this.score += filtered[i];\n        }\n        filtered = filtered.filter((v)=>v !== 0);\n        while(filtered.length < this.size)filtered.push(0);\n        return filtered;\n    }\n    #addRandomTile() {\n        const empty = [];\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.state[i][j] === 0) empty.push([\n                i,\n                j\n            ]);\n        }\n        if (empty.length > 0) {\n            const [i, j] = empty[Math.floor(Math.random() * empty.length)];\n            this.state[i][j] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    #afterMove() {\n        this.#addRandomTile();\n        // Проверка победы\n        if (this.state.some((row)=>row.includes(2048))) {\n            this.status = \"win\";\n            return;\n        }\n        const canMove = this.state.some((row)=>row.includes(0));\n        if (!canMove && !this.#canMerge()) this.status = \"lose\";\n    }\n    #canMerge() {\n        for(let i = 0; i < this.size; i++)for(let j = 0; j < this.size - 1; j++){\n            if (this.state[i][j] === this.state[i][j + 1]) return true;\n        }\n        for(let j = 0; j < this.size; j++)for(let i = 0; i < this.size - 1; i++){\n            if (this.state[i][j] === this.state[i + 1][j]) return true;\n        }\n        return false;\n    }\n}\nvar $a5fd07fa01589658$export$2e2bcd8739ae039 = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$gameStatusContainer = document.querySelector(\".message-container\");\nconst $09e991522ca7e64e$var$table = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$rows = $09e991522ca7e64e$var$table.querySelectorAll(\"tr\");\nfunction $09e991522ca7e64e$var$updateGameMessage(type) {\n    switch(type){\n        case \"start\":\n            $09e991522ca7e64e$var$gameStatusContainer.textContent = 'Press \"Start\" to begin game. Good luck!';\n            $09e991522ca7e64e$var$gameStatusContainer.classList.remove(\"hidden\");\n            break;\n        case \"win\":\n            $09e991522ca7e64e$var$gameStatusContainer.textContent = \"Winner! Congrats! You did it!\";\n            $09e991522ca7e64e$var$gameStatusContainer.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$gameStatusContainer.textContent = \"You lose! Restart the game?\";\n            $09e991522ca7e64e$var$gameStatusContainer.classList.remove(\"hidden\");\n            break;\n        case \"hide\":\n        default:\n            $09e991522ca7e64e$var$gameStatusContainer.classList.add(\"hidden\");\n            break;\n    }\n}\nfunction $09e991522ca7e64e$var$render() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    const score = $09e991522ca7e64e$var$game.getScore();\n    const Gamestatus = $09e991522ca7e64e$var$game.getStatus();\n    $09e991522ca7e64e$var$gameScore.textContent = score;\n    for(let i = 0; i < state.length; i++)for(let j = 0; j < state[i].length; j++){\n        const value = state[i][j];\n        const cell = $09e991522ca7e64e$var$rows[i].cells[j];\n        cell.textContent = value === 0 ? \"\" : value;\n        cell.className = \"field-cell\";\n        if (value > 0) cell.classList.add(`field-cell--${value}`);\n        if (value >= 2048) cell.classList.add(\"field-cell--2048\");\n    }\n    if (Gamestatus === \"win\") $09e991522ca7e64e$var$updateGameMessage(\"win\");\n    else if (Gamestatus === \"lose\") $09e991522ca7e64e$var$updateGameMessage(\"lose\");\n    else $09e991522ca7e64e$var$updateGameMessage(\"hide\");\n}\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const buttonStart = document.querySelector(\".start\");\n    const buttonRestart = document.querySelector(\".restart\");\n    buttonStart.addEventListener(\"click\", ()=>{\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$render();\n        buttonStart.classList.add(\"hidden\");\n        buttonRestart.classList.remove(\"hidden\");\n    });\n    buttonRestart.addEventListener(\"click\", ()=>{\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$render();\n    });\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    let moved = false;\n    switch(e.key){\n        case \"ArrowLeft\":\n            moved = $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            moved = $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            moved = $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            moved = $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    if (moved) $09e991522ca7e64e$var$render();\n});\n$09e991522ca7e64e$var$updateGameMessage(\"start\");\n\n\n//# sourceMappingURL=index.77678db7.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nconst gameScore = document.querySelector('.game-score');\nconst gameStatusContainer = document.querySelector('.message-container');\nconst table = document.querySelector('.game-field');\nconst rows = table.querySelectorAll('tr');\n\nfunction updateGameMessage(type) {\n  switch (type) {\n    case 'start':\n      gameStatusContainer.textContent =\n        'Press \"Start\" to begin game. Good luck!';\n      gameStatusContainer.classList.remove('hidden');\n      break;\n    case 'win':\n      gameStatusContainer.textContent = 'Winner! Congrats! You did it!';\n      gameStatusContainer.classList.remove('hidden');\n      break;\n    case 'lose':\n      gameStatusContainer.textContent = 'You lose! Restart the game?';\n      gameStatusContainer.classList.remove('hidden');\n      break;\n    case 'hide':\n    default:\n      gameStatusContainer.classList.add('hidden');\n      break;\n  }\n}\n\nfunction render() {\n  const state = game.getState();\n  const score = game.getScore();\n  const Gamestatus = game.getStatus();\n\n  gameScore.textContent = score;\n\n  for (let i = 0; i < state.length; i++) {\n    for (let j = 0; j < state[i].length; j++) {\n      const value = state[i][j];\n      const cell = rows[i].cells[j];\n\n      cell.textContent = value === 0 ? '' : value;\n      cell.className = 'field-cell';\n\n      if (value > 0) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n\n      if (value >= 2048) {\n        cell.classList.add('field-cell--2048');\n      }\n    }\n  }\n\n  if (Gamestatus === 'win') {\n    updateGameMessage('win');\n  } else if (Gamestatus === 'lose') {\n    updateGameMessage('lose');\n  } else {\n    updateGameMessage('hide');\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const buttonStart = document.querySelector('.start');\n  const buttonRestart = document.querySelector('.restart');\n\n  buttonStart.addEventListener('click', () => {\n    game.start();\n    render();\n\n    buttonStart.classList.add('hidden');\n    buttonRestart.classList.remove('hidden');\n  });\n\n  buttonRestart.addEventListener('click', () => {\n    game.restart();\n    render();\n  });\n});\n\ndocument.addEventListener('keydown', (e) => {\n  let moved = false;\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      moved = game.moveLeft();\n      break;\n    case 'ArrowRight':\n      moved = game.moveRight();\n      break;\n    case 'ArrowUp':\n      moved = game.moveUp();\n      break;\n    case 'ArrowDown':\n      moved = game.moveDown();\n      break;\n  }\n\n  if (moved) {\n    render();\n  }\n});\n\nupdateGameMessage('start');\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    // eslint-disable-next-line no-console\n    this.size = 4;\n    this.score = 0;\n\n    this.state =\n      initialState ||\n      Array.from({ length: this.size }, () => Array(this.size).fill(0));\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let i = 0; i < this.size; i++) {\n      const newRow = this.#mergeRow([...this.state[i]]);\n\n      if (JSON.stringify(this.state[i]) !== JSON.stringify(newRow)) {\n        moved = true;\n      }\n      this.state[i] = newRow;\n    }\n\n    if (moved) {\n      this.#afterMove();\n    }\n\n    return moved;\n  }\n  moveRight() {\n    let moved = false;\n\n    for (let i = 0; i < this.size; i++) {\n      const reversed = [...this.state[i]].reverse();\n      const newRow = this.#mergeRow(reversed).reverse();\n\n      if (JSON.stringify(this.state[i]) !== JSON.stringify(newRow)) {\n        moved = true;\n      }\n      this.state[i] = newRow;\n    }\n\n    if (moved) {\n      this.#afterMove();\n    }\n\n    return moved;\n  }\n  moveUp() {\n    let moved = false;\n\n    for (let j = 0; j < this.size; j++) {\n      const col = [];\n\n      for (let i = 0; i < this.size; i++) {\n        col.push(this.state[i][j]);\n      }\n\n      const newCol = this.#mergeRow([...col]);\n\n      if (JSON.stringify(col) !== JSON.stringify(newCol)) {\n        moved = true;\n      }\n\n      for (let i = 0; i < this.size; i++) {\n        this.state[i][j] = newCol[i];\n      }\n    }\n\n    if (moved) {\n      this.#afterMove();\n    }\n\n    return moved;\n  }\n  moveDown() {\n    let moved = false;\n\n    for (let j = 0; j < this.size; j++) {\n      const col = [];\n\n      for (let i = 0; i < this.size; i++) {\n        col.push(this.state[i][j]); // эт\n      }\n\n      const newCol = this.#mergeRow(col.reverse()).reverse();\n\n      if (JSON.stringify(col) !== JSON.stringify(newCol)) {\n        moved = true;\n      }\n\n      for (let i = 0; i < this.size; i++) {\n        this.state[i][j] = newCol[i];\n      }\n    }\n\n    if (moved) {\n      this.#afterMove();\n    }\n\n    return moved;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.score = 0;\n\n    // prettier-ignore\n    this.state = Array.from({ length: this.size }, () =>\n      Array(this.size).fill(0));\n\n    this.#addRandomTile();\n    this.#addRandomTile();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n  }\n\n  // Add your own methods here\n  #mergeRow(row) {\n    let filtered = row.filter((v) => v !== 0);\n\n    for (let i = 0; i < filtered.length - 1; i++) {\n      if (filtered[i] === filtered[i + 1]) {\n        filtered[i] *= 2;\n        filtered[i + 1] = 0;\n        this.score += filtered[i];\n      }\n    }\n\n    filtered = filtered.filter((v) => v !== 0);\n\n    while (filtered.length < this.size) {\n      filtered.push(0);\n    }\n\n    return filtered;\n  }\n\n  #addRandomTile() {\n    const empty = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.state[i][j] === 0) {\n          empty.push([i, j]);\n        }\n      }\n    }\n\n    if (empty.length > 0) {\n      const [i, j] = empty[Math.floor(Math.random() * empty.length)];\n\n      this.state[i][j] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  #afterMove() {\n    this.#addRandomTile();\n\n    // Проверка победы\n    if (this.state.some((row) => row.includes(2048))) {\n      this.status = 'win';\n\n      return;\n    }\n\n    const canMove = this.state.some((row) => row.includes(0));\n\n    if (!canMove && !this.#canMerge()) {\n      this.status = 'lose';\n    }\n  }\n\n  #canMerge() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size - 1; j++) {\n        if (this.state[i][j] === this.state[i][j + 1]) {\n          return true;\n        }\n      }\n    }\n\n    for (let j = 0; j < this.size; j++) {\n      for (let i = 0; i < this.size - 1; i++) {\n        if (this.state[i][j] === this.state[i + 1][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nexport default Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","score","state","Array","from","length","fill","status","moveLeft","moved","i","newRow","JSON","stringify","moveRight","reversed","reverse","moveUp","j","col","push","newCol","moveDown","getScore","getState","getStatus","start","restart","row","filtered","filter","v","empty","Math","floor","random","some","includes","$09e991522ca7e64e$var$gameScore","document","querySelector","$09e991522ca7e64e$var$gameStatusContainer","$09e991522ca7e64e$var$rows","$09e991522ca7e64e$var$table","querySelectorAll","$09e991522ca7e64e$var$updateGameMessage","type","textContent","classList","remove","add","$09e991522ca7e64e$var$render","Gamestatus","value","cell","cells","className","addEventListener","buttonStart","buttonRestart","e","key"],"version":3,"file":"index.77678db7.js.map"}